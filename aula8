dade1 = 39
idade2 = 30
idade3 = 27
idade4 = 18

print(idade1)
print(idade2)
print(idade3)
print(idade4)
39
30
27
18
idades = [39, 30, 27, 18]
type(idades)
list
len(idades)
4
idades[0]
39
idades
[39, 30, 27, 18]
print(idades[1])
print(idades[2])
print(idades[3])
30
27
18
idades.append(15)
idades
[39, 30, 27, 18, 15]
idades[4]
15
idades[5]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-11-9afc071113c0> in <module>()
----> 1 idades[5]

IndexError: list index out of range
for idade in idades:
  print(idade)
39
30
27
18
15
idades.remove(30)
idades
[39, 27, 18, 15]
idades.remove(30)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-15-4f77f6ee3785> in <module>()
----> 1 idades.remove(30)

ValueError: list.remove(x): x not in list
idades.append(15)
idades
[39, 27, 18, 15, 15]
idades.remove(15)
idades
[39, 27, 18, 15]
idades.append(27)
idades.remove(27)
idades
[39, 18, 15, 27]
28 in idades
False
15 in idades
True
if 15 in idades:
  idades.remove(15)
idades
[39, 18, 27]
if 28 in idades:
  idades.remove(28)
idades
[39, 18, 27]
idades.append(19)
idades
[39, 18, 27, 19]
idades.insert(0, 20)
idades
[20, 39, 18, 27, 19]
idades = [20, 39, 18]
idades
[20, 39, 18]
idades.append([27, 19])
idades
[20, 39, 18, [27, 19]]
for elemento in idades:
  print("Recebi o elemento", elemento)
Recebi o elemento 20
Recebi o elemento 39
Recebi o elemento 18
Recebi o elemento [27, 19]
idades = [20, 39, 18]
idades.extend([27, 19])
idades
[20, 39, 18, 27, 19]
for idade in idades:
  print(idade + 1)
21
40
19
28
20
idades_no_ano_que_vem = []
for idade in idades:
  idades_no_ano_que_vem.append(idade+1)
idades_no_ano_que_vem
[21, 40, 19, 28, 20]
idades_no_ano_que_vem = [idade+1 for idade in idades]
idades_no_ano_que_vem
[21, 40, 19, 28, 20]
[idade for idade in idades if idade > 21]
[39, 27]
idades
[20, 39, 18, 27, 19]
def proximo_ano(idade):
  return idade+1

[proximo_ano(idade) for idade in idades if idade > 21]
[40, 28]
def faz_processamento_de_visualizacao(lista):
  print(len(lista))
  lista.append(13)
idades = [16, 21, 29, 56, 43]
faz_processamento_de_visualizacao(idades)
idades
5
[16, 21, 29, 56, 43, 13]
def faz_processamento_de_visualizacao(lista = []):
  print(len(lista))
  print(lista)
  lista.append(13)
faz_processamento_de_visualizacao()
0
[]
faz_processamento_de_visualizacao()
1
[13]
faz_processamento_de_visualizacao()
2
[13, 13]
faz_processamento_de_visualizacao()
3
[13, 13, 13]
def faz_processamento_de_visualizacao(lista = list()):
  print(len(lista))
  print(lista)
  lista.append(13)
faz_processamento_de_visualizacao()
faz_processamento_de_visualizacao()
0
[]
1
[13]
def faz_processamento_de_visualizacao(lista = None):
  if lista == None:
    lista = list()
  print(len(lista))
  print(lista)
  lista.append(13)
faz_processamento_de_visualizacao()
faz_processamento_de_visualizacao()
faz_processamento_de_visualizacao()
faz_processamento_de_visualizacao()
0
[]
0
[]
0
[]
0
[]
Objetos próprios
class ContaCorrente:
  
  def __init__(self, codigo):
    self.codigo = codigo
    self.saldo = 0

  def deposita(self, valor):
    self.saldo += valor
    
  def __str__(self):
    return "[>>Codigo {} Saldo {}<<]".format(self.codigo, self.saldo)
  
conta_do_gui = ContaCorrente(15)
print(conta_do_gui)
[>>Codigo 15 Saldo 0<<]
conta_do_gui.deposita(500)
print(conta_do_gui)
[>>Codigo 15 Saldo 500<<]
conta_da_dani = ContaCorrente(47685)
conta_da_dani.deposita(1000)
print(conta_da_dani)
[>>Codigo 47685 Saldo 1000<<]
contas = [conta_do_gui, conta_da_dani]
for conta in contas:
  print(conta)
[>>Codigo 15 Saldo 500<<]
[>>Codigo 47685 Saldo 1000<<]
contas = [conta_do_gui, conta_da_dani, conta_do_gui]
print(contas[0])
[>>Codigo 15 Saldo 500<<]
conta_do_gui.deposita(100)
print(contas[0])
[>>Codigo 15 Saldo 600<<]
print(conta_do_gui)
[>>Codigo 15 Saldo 600<<]
print(contas[2])
[>>Codigo 15 Saldo 600<<]
contas[2].deposita(300)
print(conta_do_gui)
[>>Codigo 15 Saldo 900<<]
def deposita_para_todas(contas):
  for conta in contas:
    conta.deposita(100)

contas = [conta_do_gui, conta_da_dani]
print(contas[0], contas[1])
deposita_para_todas(contas)
print(contas[0], contas[1])
[>>Codigo 15 Saldo 900<<] [>>Codigo 47685 Saldo 1000<<]
[>>Codigo 15 Saldo 1000<<] [>>Codigo 47685 Saldo 1100<<]
contas.insert(0,76)
print(contas[0], contas[1], contas[2])
76 [>>Codigo 15 Saldo 1000<<] [>>Codigo 47685 Saldo 1100<<]
deposita_para_todas(contas)
print(contas[0], contas[1], contas[2])
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-66-92ac4487eece> in <module>()
----> 1 deposita_para_todas(contas)
      2 print(contas[0], contas[1], contas[2])

<ipython-input-64-5c36215b3621> in deposita_para_todas(contas)
      1 def deposita_para_todas(contas):
      2   for conta in contas:
----> 3     conta.deposita(100)
      4 
      5 contas = [conta_do_gui, conta_da_dani]

AttributeError: 'int' object has no attribute 'deposita'
guilherme = ('Guilherme', 37, 1981) # tupla
daniela = ('Daniela', 31, 1987)
# paulo = (39, 'Paulo', 1979) # ruim
guilherme.append(6754)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-68-b58a3f93fa55> in <module>()
----> 1 guilherme.append(6754)

AttributeError: 'tuple' object has no attribute 'append'
conta_do_gui = (15, 1000)
# conta_do_gui.deposita() # variação OO
conta_do_gui[1]
1000
conta_do_gui[1] += 100
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-70-b6479b2fecd6> in <module>()
----> 1 conta_do_gui[1] += 100

TypeError: 'tuple' object does not support item assignment
def deposita(conta): # variação "funcional"(separando o comportamento dos dados)
  novo_saldo = conta[1] + 100
  codigo = conta[0]
  return (codigo, novo_saldo)
deposita(conta_do_gui)
(15, 1100)
conta_do_gui
(15, 1000)
conta_do_gui = deposita(conta_do_gui)
conta_do_gui
(15, 1100)
usuarios = [guilherme, daniela]
usuarios
[('Guilherme', 37, 1981), ('Daniela', 31, 1987)]
usuarios.append(('Paulo', 39, 1979))
usuarios
[('Guilherme', 37, 1981), ('Daniela', 31, 1987), ('Paulo', 39, 1979)]
usuarios[0][0] = 'Guilherme Silveira'
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-78-dc00118821b7> in <module>()
----> 1 usuarios[0][0] = 'Guilherme Silveira'

TypeError: 'tuple' object does not support item assignment
conta_do_gui = ContaCorrente(15)
conta_do_gui.deposita(500)
conta_da_dani = ContaCorrente(234876)
conta_da_dani.deposita(1000)

contas = (conta_do_gui, conta_da_dani)
for conta in contas:
  print(conta)
[>>Codigo 15 Saldo 500<<]
[>>Codigo 234876 Saldo 1000<<]
contas.append(423768)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-81-2a440e860371> in <module>()
----> 1 contas.append(423768)

AttributeError: 'tuple' object has no attribute 'append'
contas[0].deposita(300)
for conta in contas:
  print(conta)
[>>Codigo 15 Saldo 800<<]
[>>Codigo 234876 Saldo 1000<<]
Herança e polimorfismo
from abc import ABCMeta, abstractmethod

class Conta(metaclass=ABCMeta):
  
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0

  def deposita(self, valor):
    self._saldo += valor

  @abstractmethod
  def passa_o_mes(self):
    pass

  def __str__(self):
    return "[>>Codigo {} Saldo {}<<]".format(self._codigo, self._saldo)
  
print(Conta(88))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-85-bcabbe50454b> in <module>()
----> 1 print(Conta(88))

TypeError: Can't instantiate abstract class Conta with abstract methods passa_o_mes
class ContaCorrente(Conta):
  
  def passa_o_mes(self):
    self._saldo -= 2
    
class ContaPoupanca(Conta):
  
  def passa_o_mes(self):
    self._saldo *= 1.01
    self._saldo -= 3

class ContaInvestimento(Conta):
  pass
ContaInvestimento(764)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-87-88113fa11745> in <module>()
----> 1 ContaInvestimento(764)

TypeError: Can't instantiate abstract class ContaInvestimento with abstract methods passa_o_mes
conta16 = ContaCorrente(16)
conta16.deposita(1000)
conta16.passa_o_mes()
print(conta16)
[>>Codigo 16 Saldo 998<<]
conta17 = ContaPoupanca(17)
conta17.deposita(1000)
conta17.passa_o_mes()
print(conta17)
[>>Codigo 17 Saldo 1007.0<<]
conta16 = ContaCorrente(16)
conta16.deposita(1000)
conta17 = ContaPoupanca(17)
conta17.deposita(1000)
contas = [conta16, conta17]

for conta in contas:
  conta.passa_o_mes() # duck typing
  print(conta)
[>>Codigo 16 Saldo 998<<]
[>>Codigo 17 Saldo 1007.0<<]
evitaremos usar array puro. se precisamos de trabalho numérico, é costume usar o numpy
import array as arr

arr.array('d', [1, 3.5])
array('d', [1.0, 3.5])
arr.array('d', [1, 3.5, 'Guilherme'])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-92-b1a4380a9c4e> in <module>()
----> 1 arr.array('d', [1, 3.5, 'Guilherme'])

TypeError: must be real number, not str
!pip install numpy
Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (1.14.6)
import numpy as np

numeros = np.array([1, 3.5])
numeros
array([1. , 3.5])
numeros + 3
array([4. , 6.5])
class ContaSalario:
  
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
  
  def deposita(self, valor):
    self._saldo += valor
    
  def __str__(self):
    return "[>>Codigo {} Saldo {}<<]".format(self._codigo, self._saldo)
conta1 = ContaSalario(37)
print(conta1)
[>>Codigo 37 Saldo 0<<]
conta2 = ContaSalario(37)
print(conta2)
[>>Codigo 37 Saldo 0<<]
conta1 == conta2
False
contas = [conta1]
conta1 in contas
True
conta2 in contas
False
class ContaSalario:
  
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
    
  def __eq__(self, outro):
    return self._codigo == outro._codigo
  
  def deposita(self, valor):
    self._saldo += valor
    
  def __str__(self):
    return "[>>Codigo {} Saldo {}<<]".format(self._codigo, self._saldo)
conta1 = ContaSalario(37)
conta2 = ContaSalario(37)
conta1 == conta2
True
conta1 != conta2
False
conta1 in [conta2]
True
conta2 in [conta1]
True
class ContaSalario:
  
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
    
  def __eq__(self, outro):
    return self._codigo == outro._codigo and self._saldo == outro._saldo
  
  def deposita(self, valor):
    self._saldo += valor
    
  def __str__(self):
    return "[>>Codigo {} Saldo {}<<]".format(self._codigo, self._saldo)
conta1 = ContaSalario(37)
conta2 = ContaSalario(37)
conta1 == conta2
True
conta1.deposita(10)
conta1 == conta2
False
class ContaSalario:
  
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
    
  def __eq__(self, outro):
    if type(outro) != ContaSalario:
      return False
    
    return self._codigo == outro._codigo and self._saldo == outro._saldo
  
  def deposita(self, valor):
    self._saldo += valor
    
  def __str__(self):
    return "[>>Codigo {} Saldo {}<<]".format(self._codigo, self._saldo)
conta1 = ContaSalario(37)
conta2 = ContaCorrente(37)
conta1 == conta2
False
isinstance(ContaCorrente(34), ContaCorrente)
True
isinstance(ContaCorrente(34), Conta)
True
idades = [15, 87, 32, 65, 56, 32, 49, 37]

for i in range(len(idades)):
  print(i, idades[i])
0 15
1 87
2 32
3 65
4 56
5 32
6 49
7 37
range(len(idades)) # lazy...
range(0, 8)
enumerate(idades) # lazy
<enumerate at 0x7f4846786a20>
list(range(len(idades))) # forcei a geração dos valores
[0, 1, 2, 3, 4, 5, 6, 7]
list(enumerate(idades))
[(0, 15), (1, 87), (2, 32), (3, 65), (4, 56), (5, 32), (6, 49), (7, 37)]
for indice, idade in enumerate(idades): # unpacking da nossa tupla
  print(indice, "x", idade)
0 x 15
1 x 87
2 x 32
3 x 65
4 x 56
5 x 32
6 x 49
7 x 37
usuarios = [
    ("Guilherme", 37, 1981),
    ("Daniela", 31, 1987),
    ("Paulo", 39, 1979)
]

for nome, idade, nascimento in usuarios: # ja desempacotando
  print(nome)
Guilherme
Daniela
Paulo
for nome, _, _ in usuarios: # ja desempacotando, ignorando o resto
  print(nome)
Guilherme
Daniela
Paulo
idades
[15, 87, 32, 65, 56, 32, 49, 37]
sorted(idades)
[15, 32, 32, 37, 49, 56, 65, 87]
15 < 32
True
list(reversed(idades))
[37, 49, 32, 56, 65, 32, 87, 15]
sorted(idades, reverse=True)
[87, 65, 56, 49, 37, 32, 32, 15]
list(reversed(sorted(idades)))
[87, 65, 56, 49, 37, 32, 32, 15]
idades
[15, 87, 32, 65, 56, 32, 49, 37]
idades.sort()
idades
[15, 32, 32, 37, 49, 56, 65, 87]
15 < 32
True
nomes = ["guilherme", "Daniela", "Paulo"]
sorted(nomes)
['Daniela', 'Paulo', 'guilherme']
class ContaSalario:
  
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
    
  def __eq__(self, outro):
    if type(outro) != ContaSalario:
      return False
    
    return self._codigo == outro._codigo and self._saldo == outro._saldo
  
  def deposita(self, valor):
    self._saldo += valor
    
  def __str__(self):
    return "[>>Codigo {} Saldo {}<<]".format(self._codigo, self._saldo)
conta_do_guilherme = ContaSalario(17)
conta_do_guilherme.deposita(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposita(1000)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposita(510)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]
for conta in contas:
  print(conta)
[>>Codigo 17 Saldo 500<<]
[>>Codigo 3 Saldo 1000<<]
[>>Codigo 133 Saldo 510<<]
sorted(contas)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-153-df7230969aa4> in <module>()
----> 1 sorted(contas)

TypeError: '<' not supported between instances of 'ContaSalario' and 'ContaSalario'
conta_do_guilherme < conta_da_daniela
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-154-23ebe804144a> in <module>()
----> 1 conta_do_guilherme < conta_da_daniela

TypeError: '<' not supported between instances of 'ContaSalario' and 'ContaSalario'
def extrai_saldo(conta):
  return conta._saldo

for conta in sorted(contas, key=extrai_saldo):
  print(conta)
[>>Codigo 17 Saldo 500<<]
[>>Codigo 133 Saldo 510<<]
[>>Codigo 3 Saldo 1000<<]
from operator import attrgetter

for conta in sorted(contas, key=attrgetter("_saldo")):
  print(conta)
[>>Codigo 17 Saldo 500<<]
[>>Codigo 133 Saldo 510<<]
[>>Codigo 3 Saldo 1000<<]
conta_do_guilherme < conta_da_daniela
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-158-23ebe804144a> in <module>()
----> 1 conta_do_guilherme < conta_da_daniela

TypeError: '<' not supported between instances of 'ContaSalario' and 'ContaSalario'
class ContaSalario:
  
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
    
  def __eq__(self, outro):
    if type(outro) != ContaSalario:
      return False
    
    return self._codigo == outro._codigo and self._saldo == outro._saldo
  
  def __lt__(self, outro):
    return self._saldo < outro._saldo
  
  def deposita(self, valor):
    self._saldo += valor
    
  def __str__(self):
    return "[>>Codigo {} Saldo {}<<]".format(self._codigo, self._saldo)
conta_do_guilherme = ContaSalario(17)
conta_do_guilherme.deposita(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposita(1000)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposita(510)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]
conta_do_guilherme < conta_da_daniela
True
conta_do_guilherme > conta_da_daniela
False
for conta in sorted(contas):
  print(conta)
[>>Codigo 17 Saldo 500<<]
[>>Codigo 133 Saldo 510<<]
[>>Codigo 3 Saldo 1000<<]
for conta in sorted(contas,reverse=True):
  print(conta)
[>>Codigo 3 Saldo 1000<<]
[>>Codigo 133 Saldo 510<<]
[>>Codigo 17 Saldo 500<<]
conta_do_guilherme = ContaSalario(1700)
conta_do_guilherme.deposita(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposita(1000)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposita(500)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]
for conta in sorted(contas, key=attrgetter("_saldo", "_codigo")):
  print(conta)
[>>Codigo 133 Saldo 500<<]
[>>Codigo 1700 Saldo 500<<]
[>>Codigo 3 Saldo 1000<<]
conta_do_guilherme = ContaSalario(1700)
conta_do_guilherme.deposita(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposita(500)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposita(500)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]
for conta in sorted(contas, key=attrgetter("_saldo", "_codigo")):
  print(conta)
[>>Codigo 3 Saldo 500<<]
[>>Codigo 133 Saldo 500<<]
[>>Codigo 1700 Saldo 500<<]
class ContaSalario:
  
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
    
  def __eq__(self, outro):
    if type(outro) != ContaSalario:
      return False
    
    return self._codigo == outro._codigo and self._saldo == outro._saldo
  
  def __lt__(self, outro):
    if self._saldo != outro._saldo:
      return self._saldo < outro._saldo
    
    return self._codigo < outro._codigo
  
  def deposita(self, valor):
    self._saldo += valor
    
  def __str__(self):
    return "[>>Codigo {} Saldo {}<<]".format(self._codigo, self._saldo)
conta_do_guilherme = ContaSalario(1700)
conta_do_guilherme.deposita(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposita(500)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposita(500)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]
for conta in sorted(contas):
  print(conta)
[>>Codigo 3 Saldo 500<<]
[>>Codigo 133 Saldo 500<<]
[>>Codigo 1700 Saldo 500<<]
conta_do_guilherme = ContaSalario(1700)
conta_do_guilherme.deposita(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposita(1000)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposita(500)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]
for conta in sorted(contas):
  print(conta)
[>>Codigo 133 Saldo 500<<]
[>>Codigo 1700 Saldo 500<<]
[>>Codigo 3 Saldo 1000<<]
conta_do_guilherme < conta_da_daniela
True
conta_do_guilherme <= conta_da_daniela
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-181-5f6d4259fd98> in <module>()
----> 1 conta_do_guilherme <= conta_da_daniela

TypeError: '<=' not supported between instances of 'ContaSalario' and 'ContaSalario'
from functools import total_ordering

@total_ordering
class ContaSalario:
  
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
    
  def __eq__(self, outro):
    if type(outro) != ContaSalario:
      return False
    
    return self._codigo == outro._codigo and self._saldo == outro._saldo
  
  def __lt__(self, outro):
    if self._saldo != outro._saldo:
      return self._saldo < outro._saldo
    
    return self._codigo < outro._codigo
  
  def deposita(self, valor):
    self._saldo += valor
    
  def __str__(self):
    return "[>>Codigo {} Saldo {}<<]".format(self._codigo, self._saldo)
conta_do_guilherme = ContaSalario(1700)
conta_do_guilherme.deposita(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposita(1000)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposita(500)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]
conta_do_guilherme <= conta_da_daniela
True
conta_do_guilherme <= conta_do_paulo
False
conta_do_guilherme < conta_do_guilherme
False
conta_do_guilherme == conta_do_guilherme
True
conta_do_guilherme <= conta_do_guilherme
True
 
